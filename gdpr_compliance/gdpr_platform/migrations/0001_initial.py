# Generated by Django 4.2.19 on 2025-03-01 16:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gdpr_platform.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', gdpr_platform.models.EncryptedField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('government_id', gdpr_platform.models.EncryptedField(blank=True, null=True)),
                ('emergency_contact', gdpr_platform.models.EncryptedField(blank=True, null=True)),
                ('occupation', models.CharField(blank=True, max_length=200, null=True)),
                ('company', models.CharField(blank=True, max_length=200, null=True)),
                ('preferred_language', models.CharField(blank=True, max_length=50, null=True)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/%Y/%m/%d/')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending_deletion', 'Pending Deletion'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deletion_scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('privacy_settings', models.JSONField(blank=True, default=dict)),
                ('marketing_preferences', models.JSONField(blank=True, default=dict)),
                ('social_profiles', gdpr_platform.models.EncryptedField(blank=True, null=True)),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('data_retention_policy', models.JSONField(blank=True, default=dict)),
                ('last_privacy_acceptance', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_deletion_date', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': [('can_view_sensitive_data', 'Can view sensitive user data'), ('can_export_user_data', 'Can export user data'), ('can_delete_user_data', 'Can delete user data')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataBreachIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', gdpr_platform.models.EncryptedField()),
                ('severity', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=10)),
                ('date_discovered', models.DateTimeField()),
                ('date_reported', models.DateTimeField(blank=True, null=True)),
                ('notification_sent_to_authorities', models.BooleanField(default=False)),
                ('remediation_steps', models.TextField()),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('ai_detected', models.BooleanField(default=False)),
                ('risk_score', models.FloatField(default=0.0)),
                ('anomaly_details', models.JSONField(blank=True, null=True)),
                ('data_protection_impact', models.TextField(blank=True, help_text='Impact assessment of the breach on data protection', null=True)),
                ('notification_deadline', models.DateTimeField(default=gdpr_platform.models.get_notification_deadline, help_text='72-hour deadline for notifying supervisory authority')),
                ('containment_measures', models.JSONField(default=list, help_text='List of measures taken to contain the breach')),
                ('lessons_learned', models.TextField(blank=True, help_text='Post-incident analysis and lessons learned', null=True)),
                ('affected_data_types', models.JSONField(default=list, help_text='Types of personal data affected by the breach')),
                ('breach_root_cause', models.TextField(blank=True, help_text='Root cause analysis of the breach', null=True)),
                ('supervisory_authority_reference', models.CharField(blank=True, help_text='Reference number from supervisory authority', max_length=100, null=True)),
                ('cross_border_impact', models.BooleanField(default=False, help_text='Whether breach affects data subjects in multiple countries')),
            ],
        ),
        migrations.CreateModel(
            name='DataCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('sensitivity_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('special', 'Special Category')], max_length=20)),
                ('retention_period', models.IntegerField(help_text='Retention period in days')),
                ('requires_consent', models.BooleanField(default=True)),
                ('legal_basis', models.CharField(choices=[('consent', 'Explicit Consent'), ('contract', 'Contract Performance'), ('legal_obligation', 'Legal Obligation'), ('vital_interests', 'Vital Interests'), ('public_task', 'Public Task'), ('legitimate_interests', 'Legitimate Interests')], max_length=50)),
                ('examples', models.TextField(help_text='Examples of this type of data')),
                ('special_handling_required', models.BooleanField(default=False)),
                ('handling_instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_data_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Category',
                'verbose_name_plural': 'Data Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataProcessingActivity',
            fields=[
                ('activity_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('processing_type', models.CharField(choices=[('collection', 'Data Collection'), ('storage', 'Data Storage'), ('use', 'Data Use'), ('disclosure', 'Data Disclosure'), ('erasure', 'Data Erasure')], max_length=20)),
                ('legal_basis', models.CharField(choices=[('consent', 'Explicit Consent'), ('contract', 'Contract Performance'), ('legal_obligation', 'Legal Obligation'), ('vital_interests', 'Vital Interests'), ('public_task', 'Public Task'), ('legitimate_interests', 'Legitimate Interests')], max_length=20)),
                ('purpose', models.TextField()),
                ('data_subjects', models.JSONField(help_text='Categories of data subjects affected')),
                ('recipients', models.JSONField(help_text='Categories of recipients')),
                ('retention_period', models.IntegerField(help_text='Retention period in days')),
                ('security_measures', models.JSONField()),
                ('cross_border_transfer', models.BooleanField(default=False)),
                ('transfer_details', models.JSONField(blank=True, null=True)),
                ('department', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk')], max_length=10)),
                ('dpia_required', models.BooleanField(default=False)),
                ('dpia_completed', models.BooleanField(default=False)),
                ('dpia_details', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_data_processing_activities', to=settings.AUTH_USER_MODEL)),
                ('data_categories', models.ManyToManyField(to='gdpr_platform.datacategory')),
                ('last_reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_data_processing_activities', to=settings.AUTH_USER_MODEL)),
                ('processor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_processing_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Processing Activity',
                'verbose_name_plural': 'Data Processing Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PrivacyPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=10)),
                ('content', models.TextField()),
                ('effective_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=False)),
                ('ai_compliance_score', models.FloatField(default=0.0)),
                ('ai_recommendations', models.TextField(blank=True, null=True)),
                ('last_ai_analysis', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'effective_date',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('mfa_verified', models.BooleanField(default=False, help_text='Whether this session was verified using MFA')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
            },
        ),
        migrations.CreateModel(
            name='UserPrivacyPolicyConsent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('sentiment_analysis', models.JSONField(blank=True, null=True)),
                ('ai_recommendations', models.TextField(blank=True, null=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='gdpr_platform.privacypolicy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBreachNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notified_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('notification_method', models.CharField(default='email', max_length=20)),
                ('breach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gdpr_platform.databreachincident')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_key', models.CharField(max_length=32)),
                ('is_enabled', models.BooleanField(default=False)),
                ('backup_codes', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Two-Factor Authentication',
                'verbose_name_plural': 'Two-Factor Authentication',
            },
        ),
        migrations.CreateModel(
            name='TrustSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trust_duration', models.IntegerField(choices=[(30, '30 days'), (60, '60 days'), (90, '90 days')], default=30)),
                ('require_2fa_new_ip', models.BooleanField(default=True)),
                ('max_trusted_devices', models.IntegerField(default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trust Settings',
                'verbose_name_plural': 'Trust Settings',
            },
        ),
        migrations.CreateModel(
            name='TrustedDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=64, unique=True)),
                ('user_agent', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('last_used', models.DateTimeField(default=django.utils.timezone.now)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trusted Device',
                'verbose_name_plural': 'Trusted Devices',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.JSONField()),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('security', 'Security Settings'), ('privacy', 'Privacy Settings'), ('retention', 'Data Retention'), ('notification', 'Notification Settings'), ('compliance', 'Compliance Settings')], max_length=50)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Setting',
                'verbose_name_plural': 'System Settings',
                'ordering': ['category', 'key'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='DataRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('access', 'Data Access Request'), ('deletion', 'Data Deletion Request'), ('rectification', 'Data Rectification Request'), ('portability', 'Data Portability Request'), ('restriction', 'Processing Restriction Request'), ('objection', 'Processing Objection')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('rejected', 'Rejected'), ('extended', 'Extended'), ('withdrawn', 'Withdrawn')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('notes', gdpr_platform.models.EncryptedField(blank=True, null=True)),
                ('tracking_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('data_categories', models.JSONField(default=list)),
                ('data_file', models.FileField(blank=True, null=True, upload_to='data_requests/%Y/%m/%d/')),
                ('file_format', models.CharField(choices=[('json', 'JSON'), ('csv', 'CSV')], default='json', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('extension_date', models.DateTimeField(blank=True, null=True)),
                ('extension_reason', models.TextField(blank=True)),
                ('verification_method', models.CharField(blank=True, max_length=50)),
                ('verification_status', models.BooleanField(default=False)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-request_date'],
                'permissions': [('manage_data_requests', 'Can manage data requests'), ('review_data_requests', 'Can review data requests')],
            },
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('file_format', models.CharField(choices=[('json', 'JSON'), ('csv', 'CSV')], max_length=10)),
                ('file_size', models.BigIntegerField(null=True)),
                ('download_count', models.IntegerField(default=0)),
                ('expires_at', models.DateTimeField()),
                ('status', models.CharField(default='processing', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='databreachincident',
            name='affected_users',
            field=models.ManyToManyField(through='gdpr_platform.UserBreachNotification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DataBreach',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('date_discovered', models.DateTimeField()),
                ('date_reported', models.DateTimeField(auto_now_add=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('investigating', 'Investigating'), ('contained', 'Contained'), ('resolved', 'Resolved'), ('monitoring', 'Monitoring')], default='investigating', max_length=20)),
                ('affected_data_categories', models.JSONField()),
                ('breach_type', models.CharField(choices=[('unauthorized_access', 'Unauthorized Access'), ('data_leak', 'Data Leak'), ('system_breach', 'System Breach'), ('malware', 'Malware'), ('phishing', 'Phishing'), ('insider_threat', 'Insider Threat'), ('other', 'Other')], max_length=50)),
                ('impact_assessment', models.TextField()),
                ('containment_measures', models.TextField(blank=True)),
                ('remediation_steps', models.TextField(blank=True)),
                ('authority_notified', models.BooleanField(default=False)),
                ('authority_notification_date', models.DateTimeField(blank=True, null=True)),
                ('users_notified', models.BooleanField(default=False)),
                ('user_notification_date', models.DateTimeField(blank=True, null=True)),
                ('evidence', models.JSONField(blank=True, default=dict)),
                ('investigation_notes', models.TextField(blank=True)),
                ('lessons_learned', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_users', models.ManyToManyField(related_name='affected_by_breaches', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_breaches', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_breaches', to=settings.AUTH_USER_MODEL)),
                ('response_team', models.ManyToManyField(blank=True, related_name='breach_response_team', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Breach',
                'verbose_name_plural': 'Data Breaches',
                'ordering': ['-date_discovered'],
            },
        ),
        migrations.CreateModel(
            name='CrossBorderTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_country', models.CharField(max_length=100)),
                ('recipient_organization', models.CharField(max_length=200)),
                ('data_categories', gdpr_platform.models.EncryptedField()),
                ('transfer_mechanism', models.CharField(choices=[('scc', 'Standard Contractual Clauses'), ('bcr', 'Binding Corporate Rules'), ('adequacy', 'Adequacy Decision'), ('consent', 'Explicit Consent'), ('contract', 'Contract Performance'), ('public_interest', 'Public Interest'), ('legal_claims', 'Legal Claims')], max_length=20)),
                ('safeguards', gdpr_platform.models.EncryptedField()),
                ('transfer_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(default='active', max_length=20)),
                ('adequacy_assessment', models.TextField(blank=True, help_text='Assessment of adequacy of data protection in recipient country', null=True)),
                ('transfer_impact_assessment', models.TextField(blank=True, help_text='Impact assessment of the data transfer', null=True)),
                ('periodic_review_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date for next periodic review of transfer arrangement')),
                ('supplementary_measures', models.TextField(blank=True, help_text='Additional safeguards implemented for transfer', null=True)),
                ('data_minimization_measures', models.TextField(blank=True, help_text='Measures to ensure only necessary data is transferred', null=True)),
                ('recipient_dpo_contact', models.JSONField(default=dict, help_text="Contact details of recipient's Data Protection Officer")),
                ('transfer_legal_basis', models.TextField(default='Standard Contractual Clauses (SCCs) as approved by the European Commission', help_text='Detailed legal basis for international transfer')),
                ('data_subject_rights', models.TextField(default='Data subjects maintain their GDPR rights including access, rectification, erasure, and data portability. These rights can be exercised by contacting the DPO.', help_text='Description of data subject rights for this transfer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-transfer_date'],
            },
        ),
        migrations.CreateModel(
            name='CookieConsent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('necessary_cookies', models.BooleanField(default=True)),
                ('analytics_cookies', models.BooleanField(default=False)),
                ('marketing_cookies', models.BooleanField(default=False)),
                ('functional_cookies', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('ai_analysis', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.CreateModel(
            name='ConsentRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consent_type', models.CharField(choices=[('privacy_policy', 'Privacy Policy'), ('cookie_usage', 'Cookie Usage'), ('marketing', 'Marketing Communications'), ('data_processing', 'Data Processing'), ('data_sharing', 'Data Sharing'), ('special_category', 'Special Category Data')], max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('withdrawn', 'Withdrawn'), ('expired', 'Expired')], default='active', max_length=20)),
                ('purpose', models.TextField(help_text='Purpose of data processing')),
                ('data_categories', models.JSONField(help_text='Categories of data covered by consent')),
                ('processing_activities', models.JSONField(help_text='Specific processing activities consented to')),
                ('third_parties', models.JSONField(blank=True, help_text='Third parties data may be shared with', null=True)),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('withdrawn_at', models.DateTimeField(blank=True, null=True)),
                ('collection_method', models.CharField(help_text='How consent was collected', max_length=50)),
                ('proof_of_consent', gdpr_platform.models.EncryptedField(help_text='Evidence of consent collection')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('policy_version', models.CharField(blank=True, max_length=50)),
                ('form_version', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_consents', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Consent Record',
                'verbose_name_plural': 'Consent Records',
                'ordering': ['-granted_at'],
            },
        ),
        migrations.CreateModel(
            name='BreachTimeline',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('event_type', models.CharField(choices=[('discovery', 'Breach Discovery'), ('investigation', 'Investigation Started'), ('containment', 'Containment Measures'), ('notification', 'Notification Sent'), ('remediation', 'Remediation Action'), ('resolution', 'Resolution'), ('review', 'Post-Incident Review'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField()),
                ('evidence', models.JSONField(blank=True, default=dict)),
                ('impact_assessment', models.TextField(blank=True)),
                ('next_steps', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('blocked', 'Blocked')], default='pending', max_length=20)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='breach_timeline_events', to=settings.AUTH_USER_MODEL)),
                ('breach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeline_events', to='gdpr_platform.databreach')),
            ],
            options={
                'verbose_name': 'Breach Timeline',
                'verbose_name_plural': 'Breach Timelines',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BreachNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('acknowledged', 'Acknowledged'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('notification_method', models.CharField(default='email', max_length=20)),
                ('notification_data', models.JSONField(default=dict)),
                ('breach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gdpr_platform.databreachincident')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Breach Notification',
                'verbose_name_plural': 'Breach Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('resource_type', models.CharField(max_length=50)),
                ('resource_id', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('details', gdpr_platform.models.EncryptedField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.CharField(choices=[('login', 'Login'), ('password', 'Password Change'), ('2fa', '2FA Change'), ('security', 'Security Settings')], max_length=20)),
                ('action', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('blocked', 'Blocked')], max_length=20)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='roles',
            field=models.ManyToManyField(blank=True, to='gdpr_platform.role'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='ProcessingRequirement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('requirement_type', models.CharField(choices=[('legal', 'Legal Requirement'), ('technical', 'Technical Measure'), ('organizational', 'Organizational Measure'), ('security', 'Security Control'), ('privacy', 'Privacy Measure'), ('documentation', 'Documentation Requirement'), ('other', 'Other')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('blocked', 'Blocked'), ('deferred', 'Deferred')], default='pending', max_length=20)),
                ('implementation_details', models.TextField(blank=True)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('evidence', models.JSONField(blank=True, default=dict)),
                ('verification_method', models.TextField(blank=True)),
                ('verification_frequency', models.CharField(choices=[('one_time', 'One-Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], max_length=50)),
                ('last_verified', models.DateTimeField(blank=True, null=True)),
                ('next_verification', models.DateTimeField(blank=True, null=True)),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20)),
                ('risk_details', models.TextField(blank=True)),
                ('mitigation_measures', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='gdpr_platform.dataprocessingactivity')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_requirements', to=settings.AUTH_USER_MODEL)),
                ('dependencies', models.ManyToManyField(blank=True, to='gdpr_platform.processingrequirement')),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_requirements', to=settings.AUTH_USER_MODEL)),
                ('responsible_party', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_requirements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Processing Requirement',
                'verbose_name_plural': 'Processing Requirements',
                'ordering': ['-priority', 'status', 'deadline'],
                'indexes': [models.Index(fields=['requirement_type', 'status'], name='gdpr_platfo_require_cc10fe_idx'), models.Index(fields=['priority', 'deadline'], name='gdpr_platfo_priorit_7b41ce_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProcessingActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('purpose', models.TextField()),
                ('legal_basis', models.CharField(choices=[('consent', 'Explicit Consent'), ('contract', 'Contract Performance'), ('legal_obligation', 'Legal Obligation'), ('vital_interests', 'Vital Interests'), ('public_task', 'Public Task'), ('legitimate_interests', 'Legitimate Interests')], max_length=50)),
                ('data_subjects', models.JSONField(help_text='Categories of data subjects affected')),
                ('data_recipients', models.JSONField(help_text='Categories of recipients')),
                ('retention_period', models.IntegerField(help_text='Retention period in days')),
                ('security_measures', models.JSONField(help_text='Technical and organizational security measures')),
                ('cross_border_transfer', models.BooleanField(default=False)),
                ('transfer_details', models.JSONField(blank=True, null=True)),
                ('department', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk')], max_length=10)),
                ('dpia_required', models.BooleanField(default=False)),
                ('dpia_completed', models.BooleanField(default=False)),
                ('dpia_details', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_activities', to=settings.AUTH_USER_MODEL)),
                ('data_categories', models.ManyToManyField(to='gdpr_platform.datacategory')),
                ('last_reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_activities', to=settings.AUTH_USER_MODEL)),
                ('processor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processing_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Processing Activity',
                'verbose_name_plural': 'Processing Activities',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['legal_basis', 'risk_level'], name='gdpr_platfo_legal_b_4dcd80_idx'), models.Index(fields=['created_at'], name='gdpr_platfo_created_f060eb_idx')],
            },
        ),
        migrations.CreateModel(
            name='DataTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('source_system', models.CharField(max_length=200)),
                ('destination_system', models.CharField(max_length=200)),
                ('transfer_type', models.CharField(choices=[('internal', 'Internal Transfer'), ('external', 'External Transfer'), ('cross_border', 'Cross-Border Transfer'), ('cloud', 'Cloud Service Transfer')], max_length=50)),
                ('transfer_method', models.CharField(choices=[('api', 'API'), ('sftp', 'SFTP'), ('manual', 'Manual'), ('automated', 'Automated'), ('other', 'Other')], max_length=50)),
                ('encryption_method', models.CharField(choices=[('tls', 'TLS'), ('ssl', 'SSL'), ('pgp', 'PGP'), ('aes', 'AES'), ('none', 'None')], max_length=50)),
                ('frequency', models.CharField(choices=[('one_time', 'One-Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('on_demand', 'On-Demand')], max_length=50)),
                ('volume', models.IntegerField(help_text='Estimated number of records transferred')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('suspended', 'Suspended'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20)),
                ('security_measures', models.JSONField(help_text='Security measures in place')),
                ('dpia_required', models.BooleanField(default=False)),
                ('dpia_completed', models.BooleanField(default=False)),
                ('dpia_details', models.JSONField(blank=True, null=True)),
                ('contract_reference', models.CharField(blank=True, max_length=100)),
                ('data_sharing_agreement', models.FileField(blank=True, null=True, upload_to='data_sharing_agreements/')),
                ('recipient_details', models.JSONField(help_text='Details of the recipient organization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_transfers', to=settings.AUTH_USER_MODEL)),
                ('data_categories', models.ManyToManyField(to='gdpr_platform.datacategory')),
                ('last_reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_transfers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Transfer',
                'verbose_name_plural': 'Data Transfers',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['transfer_type', 'status'], name='gdpr_platfo_transfe_618a4c_idx'), models.Index(fields=['created_at'], name='gdpr_platfo_created_bbe057_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='dataprocessingactivity',
            index=models.Index(fields=['processing_type', 'risk_level'], name='gdpr_platfo_process_e31e42_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprocessingactivity',
            index=models.Index(fields=['created_at'], name='gdpr_platfo_created_26739f_idx'),
        ),
        migrations.AddIndex(
            model_name='crossbordertransfer',
            index=models.Index(fields=['recipient_country'], name='gdpr_platfo_recipie_8f6a46_idx'),
        ),
        migrations.AddIndex(
            model_name='crossbordertransfer',
            index=models.Index(fields=['transfer_mechanism'], name='gdpr_platfo_transfe_4eedac_idx'),
        ),
        migrations.AddIndex(
            model_name='crossbordertransfer',
            index=models.Index(fields=['status'], name='gdpr_platfo_status_bcdd00_idx'),
        ),
        migrations.AddIndex(
            model_name='consentrecord',
            index=models.Index(fields=['user', 'consent_type'], name='gdpr_platfo_user_id_1e425d_idx'),
        ),
        migrations.AddIndex(
            model_name='consentrecord',
            index=models.Index(fields=['status', 'valid_until'], name='gdpr_platfo_status_44f3eb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='consentrecord',
            unique_together={('user', 'consent_type', 'policy_version')},
        ),
        migrations.AddIndex(
            model_name='breachtimeline',
            index=models.Index(fields=['breach', 'timestamp'], name='gdpr_platfo_breach__cfbaad_idx'),
        ),
        migrations.AddIndex(
            model_name='breachtimeline',
            index=models.Index(fields=['event_type', 'status'], name='gdpr_platfo_event_t_89f6f7_idx'),
        ),
        migrations.AddIndex(
            model_name='breachnotification',
            index=models.Index(fields=['status', 'created_at'], name='gdpr_platfo_status_33498f_idx'),
        ),
        migrations.AddIndex(
            model_name='breachnotification',
            index=models.Index(fields=['recipient', 'breach'], name='gdpr_platfo_recipie_24a9e2_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['timestamp', 'action'], name='gdpr_platfo_timesta_8e9712_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['resource_type', 'resource_id'], name='gdpr_platfo_resourc_6f89ca_idx'),
        ),
    ]
