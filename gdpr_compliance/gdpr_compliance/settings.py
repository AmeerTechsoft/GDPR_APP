"""
Django settings for gdpr_compliance project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages
from cryptography.fernet import Fernet
from dotenv import load_dotenv
import base64

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Encryption key for sensitive data
ENCRYPTION_KEY = b'iiIRXC_GLKZm35YH6ADmmmkvpoZA368SnpTf98wLZN4='

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gdpr_platform',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'gdpr_platform.middleware.RBACMiddleware',
    'gdpr_platform.middleware.CachingMiddleware',
    'gdpr_platform.middleware.QueryCachingMiddleware',
    'gdpr_platform.middleware.PerformanceMonitoringMiddleware',
]

ROOT_URLCONF = 'gdpr_compliance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gdpr_compliance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'gdpr_platform', 'static'),
]

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Messages
MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# Authentication
LOGIN_URL = '/gdpr/login/'
LOGIN_REDIRECT_URL = 'gdpr_platform:dashboard'
LOGOUT_REDIRECT_URL = 'gdpr_platform:landing'
AUTH_USER_MODEL = 'gdpr_platform.CustomUser'

# Admin site configuration
ADMIN_LOGIN_URL = '/gdpr/login/'
ADMIN_LOGIN_TEMPLATE = 'registration/login.html'

# Disable Django's default auth views
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Security Settings
DEBUG = True  # Set to False in production

# Only enable HTTPS redirect and secure cookies in production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
else:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Security settings that are always enabled
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'same-origin'

# Session Settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_TIMEOUT = 60
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')
SERVER_EMAIL = os.getenv('EMAIL_HOST_USER')

# Rate Limiting
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_VIEW = True
RATELIMIT_FAIL_OPEN = False

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'gdpr_audit.log',
            'formatter': 'verbose',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': True,
        },
        'gdpr_platform': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Security and Encryption Settings
def generate_encryption_key():
    """Generate a valid Fernet key and save it"""
    if DEBUG:
        # In development, use a fixed path
        key_file = os.path.join(BASE_DIR, 'gdpr_platform', '.encryption_key')
    else:
        key_file = os.path.join(BASE_DIR, '.encryption_key')
        
    # Create directory if it doesn't exist
    os.makedirs(os.path.dirname(key_file), exist_ok=True)
    
    if os.path.exists(key_file):
        with open(key_file, 'rb') as f:
            return f.read().strip()
    else:
        # Generate a URL-safe base64-encoded 32-byte key
        key = base64.urlsafe_b64encode(os.urandom(32))
        with open(key_file, 'wb') as f:
            f.write(key)
        return key

# Get encryption key from environment or generate one
env_key = os.environ.get('ENCRYPTION_KEY')
if env_key:
    try:
        # Ensure the key is properly formatted
        if isinstance(env_key, str):
            ENCRYPTION_KEY = env_key.encode()
        else:
            ENCRYPTION_KEY = env_key
        # Validate the key
        Fernet(ENCRYPTION_KEY)
    except Exception as e:
        raise ValueError(f"Invalid ENCRYPTION_KEY in environment: {str(e)}")
else:
    # Generate a new key if none exists
    ENCRYPTION_KEY = generate_encryption_key()

# Validate the encryption key
try:
    Fernet(ENCRYPTION_KEY)
except Exception as e:
    raise ValueError(f"Invalid ENCRYPTION_KEY: {str(e)}")

# Security Settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'same-origin'

# Session Settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# GDPR-specific settings
GDPR_RETENTION_PERIODS = {
    'personal_info': 365 * 7,  # 7 years for general personal data
    'financial_data': 365 * 10,  # 10 years for financial records
    'security_logs': 365 * 2,  # 2 years for security logs
    'consent_records': 365 * 7,  # 7 years after consent withdrawal
    'communication_logs': 365 * 3,  # 3 years for communication records
    'access_logs': 365,  # 1 year for access logs
    'marketing_data': 365 * 3,  # 3 years for marketing data
    'employee_data': 365 * 7,  # 7 years after employment ends
    'breach_records': 365 * 5,  # 5 years for breach records
    'audit_logs': 365 * 3,  # 3 years for audit logs
    'cookie_consent': 365,  # 1 year for cookie consent
    'session_data': 30,  # 30 days for session data
    'backup_data': 90,  # 90 days for backup data
    'temp_files': 7,  # 7 days for temporary files
    'cached_data': 1,  # 1 day for cached data
    'preferences': 365 * 2,  # 2 years for user preferences
    'analytics_data': 365,  # 1 year for analytics data
}

GDPR_DATA_CATEGORIES = [
    'personal_info',
    'contact_info',
    'authentication',
    'preferences',
    'activity_logs',
    'device_info',
]

GDPR_LEGAL_BASES = [
    ('consent', 'Explicit Consent'),
    ('contract', 'Contract Fulfillment'),
    ('legal_obligation', 'Legal Obligation'),
    ('vital_interests', 'Vital Interests'),
    ('public_task', 'Public Task'),
    ('legitimate_interests', 'Legitimate Interests'),
]

# Breach notification settings
BREACH_NOTIFICATION_DELAY = 72  # hours before mandatory notification
BREACH_SEVERITY_LEVELS = [
    ('low', 'Low Risk'),
    ('medium', 'Medium Risk'),
    ('high', 'High Risk'),
    ('critical', 'Critical Risk'),
]

# Cookie settings
COOKIE_CONSENT_EXPIRY = 365  # days
COOKIE_CATEGORIES = [
    'necessary',
    'functional',
    'analytics',
    'marketing',
]

# Logging configuration for GDPR compliance
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'gdpr.log'),
            'formatter': 'verbose',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'formatter': 'verbose',
        },
        'audit': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'audit.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'gdpr_platform': {
            'handlers': ['file', 'audit'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Security Settings for Development
CSRF_TRUSTED_ORIGINS = ['http://*', 'https://*']
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

# Custom User Model
AUTH_USER_MODEL = 'gdpr_platform.CustomUser'

# Site Settings
SITE_NAME = 'GDPR Compliance Platform'

# GDPR Settings
GDPR_DATA_CATEGORIES = {
    'personal_info': {
        'name': 'Personal Information',
        'purpose': 'Basic account functionality and identification'
    },
    'contact_info': {
        'name': 'Contact Information',
        'purpose': 'Communication and account notifications'
    },
    'security_info': {
        'name': 'Security Information',
        'purpose': 'Account security and fraud prevention'
    },
    'preferences': {
        'name': 'User Preferences',
        'purpose': 'Personalization and user experience'
    },
    'usage_data': {
        'name': 'Usage Data',
        'purpose': 'Service improvement and analytics'
    }
}

# Cookie Policy Version
COOKIE_POLICY_VERSION = '1.0'

# List of common passwords to block
COMMON_PASSWORDS = [
    'password', 'password123', '123456', 'qwerty',
    'letmein', 'welcome', 'admin', 'user', 'test'
]

# List of disposable email domains to block
DISPOSABLE_EMAIL_DOMAINS = [
    'tempmail.com', 'throwawaymail.com', 'mailinator.com',
    'guerrillamail.com', 'sharklasers.com', '10minutemail.com'
]

# Security Settings
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session Security
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Caching
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'gdpr-platform-cache',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,  # Purge 1/3 of entries when max is reached
        }
    }
}

# API Settings
API_KEY = os.getenv('API_KEY', 'dev-api-key-change-in-production')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'dev-webhook-secret-change-in-production')

# Celery Settings
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_WORKER_DISABLE_RATE_LIMITS = True
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True 